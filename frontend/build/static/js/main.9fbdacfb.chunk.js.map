{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/ContactForm.js","components/miscellaneous/InviteMail.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","Signup","handleClick","name","setName","contact","setContact","confirmpassword","setConfirmpassword","picLoading","setPicLoading","console","log","pattern","maxLength","minLength","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","src","alt","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","fontSize","fontFamily","flexDir","alignItems","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","pic","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","ContactForm","preventDefault","document","getElementById","method","url","then","msg","alert","resetForm","reset","onSubmit","this","bind","htmlFor","aria-describedby","Component","invite","SideDrawer","loadingChat","setLoadingChat","accessChat","c","as","Button","Email","InviteMail","count","effect","Effect","SCALE","Bell","notif","n","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.9fbdacfb.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [contact, setContact] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !contact || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, contact, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          contact,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"contact\" isRequired>\r\n        <FormLabel>Mobile Number</FormLabel>\r\n        <Input\r\n          type=\"tel\"\r\n          pattern=\"[7-9]{1}[0-9]{9}\"\r\n          placeholder=\"Enter Your Contact\"\r\n          onChange={(e) => setContact(e.target.value)}\r\n          maxLength=\"10\"\r\n          minLength=\"10\"\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Image,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Image src=\"logo.png\" alt=\"logo\" style={{ width: \"150px\" }} />\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Image, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                id=\"enterMsg\"\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message....\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Image src=\"chat.jpg\" alt=\"Dashboard\" id=\"dashboard\" />\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1]?.name : users[0]?.name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser?._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            {\" \"}\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Mobile No.: {user.contact}\r\n            </Text>\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"25px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                  type=\"datetime-local\"\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              id=\"msg\"\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"10px 10px 0 10px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              <div id=\"sender-name\">{m.sender.name}</div>\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: margy, sandip\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        Chat List\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../../App.css\";\r\n\r\nclass ContactForm extends Component {\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const email = document.getElementById(\"email\").value;\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"http://localhost:3002/send\",\r\n      data: {\r\n        email: email,\r\n      },\r\n    }).then((response) => {\r\n      if (response.data.msg === \"success\") {\r\n        alert(\"Message Sent.\");\r\n        this.resetForm();\r\n      } else if (response.data.msg === \"fail\") {\r\n        alert(\"Message failed to send.\");\r\n      }\r\n    });\r\n  }\r\n\r\n  resetForm() {\r\n    document.getElementById(\"contact-form\").reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\" offset-sm-1 invite\">\r\n        <form\r\n          id=\"contact-form\"\r\n          onSubmit={this.handleSubmit.bind(this)}\r\n          method=\"POST\"\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n            <br />\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"email\"\r\n              placeholder=\"Enter email to invite\"\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n          </div>\r\n\r\n          <button type=\"submit\" className=\"btn btn-primary\" id=\"submit\">\r\n            Invite\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport ContactForm from \"./ContactForm\";\r\nconst ProfileModal = ({ invite, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"280px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Invite Friends\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n\r\n          <ContactForm />\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon, EmailIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport InviteMail from \"./InviteMail\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { Image } from \"@chakra-ui/react\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Image src=\"logo.png\" alt=\"logo\" style={{ width: \"150px\" }} />\r\n        <div>\r\n          <Menu>\r\n            <MenuButton\r\n              as={Button}\r\n              bg=\"white\"\r\n              rightIcon={<EmailIcon />}\r\n            ></MenuButton>\r\n            <MenuList>\r\n              <InviteMail user={user}>\r\n                <MenuItem>Invite Friends</MenuItem>{\" \"}\r\n              </InviteMail>\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}